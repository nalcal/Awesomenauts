-//class that runs all the timers and occurences that aren't inside any of the other entities
-game.GameTimerManager = Object.extend({
-   //constructor function
-   init: function(x, y, settings){
-       //sets timer
-       this.now = new Date().getTime();
-       //keeps track of last time creep was made
-       this.lastCreep = new Date().getTime();
-       //says the game is not paused
-       this.paused = game.data.paused;
-       //keeps the function updating
-       this.alwaysUpdate = true;
-   },
-
-   update: function(){
-       //keeps track of timer
-       this.now = new Date().getTime();
-       
-       this.goldTimerCheck();
-       this.creepTimerCheck();
-
-       //updates
-       return true;
-   },
-
-   goldTimerCheck: function(){
-       //checks to make sure there is a multiple of ten. makes sure its been at least a second since last creep has been made
-       if(Math.round(this.now/1000)%20 === 0 && (this.now - this.lastCreep >= 1000)){
-           game.data.gold += (game.data.exp1+1);
-           console.log("Current gold: " + game.data.gold);
-       }
-   },
-
-   creepTimerCheck: function(){
-       //checks to make sure there is a multiple of ten. makes sure its been at least a second since last creep has been made
-       if(Math.round(this.now/1000)%10 === 0 && (this.now - this.lastCreep >= 1000)){
-           //updates timer
-           this.lastCreep = this.now;
-           //creates and inserts creeps into world
-           var creepe = me.pool.pull("EnemyCreep", 1000, 0, {});
-           //adds the creeps to the world
-           me.game.world.addChild(creepe, 5);
-       } 
-   }
-});
-
-
-game.HeroDeathManager = Object.extend({
-   init: function(x, y, settings){
-       this.alwaysUpdate = true;
-   },
-
-   update: function(){
-       //runs if player is dead
-       if(game.data.player.dead){
-           //takes the player off the screen
-           me.game.world.removeChild(game.data.player);
-           //runs the resetPlayer function
-           me.state.current().resetPlayer(10, 0);
-
-       }
-
-       return true;
-   }
-});
-
 game.ExperienceManager = Object.extend({
    init: function(x, y, settings){
        this.alwaysUpdate = true;
 @@ -95,96 +29,4 @@ game.ExperienceManager = Object.extend({
        me.save.exp2 = 4;
    }
 });
-
-game.SpendGold = Object.extend({
-   init: function(x, y, settings){
-       //sets timer
-       this.now = new Date().getTime();
-       //keeps track of last time creep was made
-       this.lastBuy = new Date().getTime();
-       //says the game is not paused
-       this.paused = game.data.paused;
-       //keeps the function updating
-       this.alwaysUpdate = true;
-       this.updateWhenPaused = true;
-   },
-
-   update: function(){
-       this.now = new Date().getTime();
-
-       if(me.input.isKeyPressed("buy") && this.now-this.lastBuy >=1000){
-           this.lastBuy = this.now;
-           if(!this.buying){
-               this.startBuying();
-           }
-           else{
-               this.stopBuying();
-           }
-
-       }
-
-       return true;
-   },
-
-   startBuying: function(){
-       this.buying = true;
-       me.state.pause(me.state.PLAY);
-       game.data.pausePos = me.game.viewport.localToWorld(0, 0);
-       game.data.buyscreen = new me.Sprite(game.data.pausePos.x, game.data.pausePos.y, me.loader.getImage('gold-screen'));
-       game.data.buyscreen.updateWhenPaused = true;
-       game.data.buyscreen.setOpacity(0.8);
-       me.game.world.addChild(game.data.buyscreen, 34);
-       game.data.player.body.setVelocity(0, 0);
-       //binds the F keys that we need 
-       me.input.bindKey(me.input.KEY.F1, "F1", true);
-       me.input.bindKey(me.input.KEY.F2, "F2", true);
-       me.input.bindKey(me.input.KEY.F3, "F3", true);
-       me.input.bindKey(me.input.KEY.F4, "F4", true);
-       me.input.bindKey(me.input.KEY.F5, "F5", true);
-       me.input.bindKey(me.input.KEY.F6, "F6", true);
-       this.setBuyText();
-   },
-
-   setBuyText: function(){
-       game.data.buytext = new (me.Renderable.extend({
-           init: function(){
-               //renders the text
-               this._super(me.Renderable, 'init', [game.data.pausePos.x, game.data.pausePos.y, 300, 50]);
-               //font and font color
-               this.font = new me.Font("Arial", 26, "white");
-               this.updateWhenPaused = true;
-               this.alwaysUpdate = true;
-           },
-
-           draw: function(renderer){
-               //sets the position on the screen for the text
-               //how to purchase upgrades
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT. CURRENT GOLD:", this.pos.x, this.pos.y);
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT", this.pos.x, this.pos.y + 50);
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT", this.pos.x, this.pos.y + 100);
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT", this.pos.x, this.pos.y + 150);
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT", this.pos.x, this.pos.y + 200);
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT", this.pos.x, this.pos.y + 250);
-               this.font.draw(renderer.getContext(), "PRESS F1-F6 TO BUY, B TO EXIT", this.pos.x, this.pos.y + 300);
-           },
-       }));
-   //when text is bought the purchase is added to the game
-   me.game.world.addChild(game.data.buytext, 35);
-
-   },
-
-   stopBuying: function(){
-       this.buying = false;
-       game.data.player.body.setVelocity(game.data.playerMoveSpeed, 20);
-       me.state.resume(me.state.PLAY);
-       //unbinds all of the F keys that we need 
-       me.input.unbindKey(me.input.KEY.F1, "F1", true);
-       me.input.unbindKey(me.input.KEY.F2, "F2", true);
-       me.input.unbindKey(me.input.KEY.F3, "F3", true);
-       me.input.unbindKey(me.input.KEY.F4, "F4", true);
-       me.input.unbindKey(me.input.KEY.F5, "F5", true);
-       me.input.unbindKey(me.input.KEY.F6, "F6", true);
-       //allows the text to be bought in game
-       me.game.world.removeChild(game.data.buytext);
-   }
-});
